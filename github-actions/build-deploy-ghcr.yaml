# Deploy to GitHub Container Registry
# Source: https://blog.codecentric.de/github-container-registry

# You no longer need to create a personal access token (PAT) and can use the GITHUB_TOKEN, provided automatically by GitHub:
# https://github.blog/changelog/2021-03-24-packages-container-registry-now-supports-github_token/

# As the image is published as a GitHub account global package, it isn’t linked with our repository and thus won’t be displayed there, 
# nor will it use the README.md as description. In order to automatically link our image to our GitHub repository, 
# we need to add a specific LABEL into our Dockerfile. It should contain the URL to our repository like this:
# LABEL org.opencontainers.image.source="https://github.com/jckleiner/my-super-app"

# By default, the published package is PUBLIC
# https://github.com/jckleiner?tab=packages

name: build-deploy-ghcr

on:
  push:
    branches: [ master ]

  # adds a "run workflow" button to the page
  workflow_dispatch:

jobs:
  build-deploy-jar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Build with Maven
        run: mvn -B package --file pom.xml --no-transfer-progress

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # provided by GitHub

      # Alternative
      # - name: Login
      #   run: |
      #     echo $GITHUB_TOKEN | docker login ghcr.io -u YourAccountOrGHOrgaNameHere --password-stdin
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/jckleiner/my-super-app:latest
          build-args: |
            PATH_TO_JAR=./target/my-super-app-1.0-SNAPSHOT.jar